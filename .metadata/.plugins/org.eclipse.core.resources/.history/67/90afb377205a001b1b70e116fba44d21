package com.cos.interexam.web;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.cos.interexam.config.CommonDto;
import com.cos.interexam.domain.InsertReqDto;
import com.cos.interexam.domain.Movie;
import com.cos.interexam.domain.MovieRepository;
import com.cos.interexam.domain.UpdateReqDto;

@RestController
public class MovieController {

	private MovieRepository movieRepository;
	
	public MovieController(MovieRepository movieRepository) {
		this.movieRepository = movieRepository;
	}
	
	@GetMapping("/movie")
	public List<Movie> findAll() {
		return movieRepository.findAll();
	}
	
	@GetMapping("/movie/{id}")
	public Movie findById(@PathVariable int id) {
		return movieRepository.findById(id);
	}
	
	@PostMapping("/movie")
	public CommonDto<?> insert(@Valid @RequestBody InsertReqDto dto, BindingResult bindingResult) {
		
	if(bindingResult.hasErrors()) {
		Map<String, String> errorMap = new HashMap<>();
		
		for(FieldError error : bindingResult.getFieldErrors()) {
			errorMap.put(error.getField(), error.getDefaultMessage());
		}
		
		return new CommonDto<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "fail");
	}
		movieRepository.insert(dto);
		return new CommonDto<>(HttpStatus.OK.value(), "ok");
	}
	
	
	
	@DeleteMapping("/movie/{id}")
	public CommonDto<?> delete(@PathVariable int id, BindingResult bindingResult) {
		
		if(bindingResult.hasErrors()) {
			Map<String, String> errorMap = new HashMap<>();
			
			for(FieldError error : bindingResult.getFieldErrors()) {
				errorMap.put(error.getField(), error.getDefaultMessage());
			}
			
			return new CommonDto<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "fail");
		}
		
		movieRepository.delete(id);
		return new CommonDto<>(HttpStatus.OK.value(), "ok");
	}
	
	
	
	@PutMapping("/movie/{id}")
	public CommonDto<?> update(@PathVariable int id, @Valid @RequestBody UpdateReqDto dto, BindingResult bindingResult) {
		
		if(bindingResult.hasErrors()) {
			Map<String, String> errorMap = new HashMap<>();
			
			for(FieldError error : bindingResult.getFieldErrors()) {
				errorMap.put(error.getField(), error.getDefaultMessage());
			}
			
			return new CommonDto<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "fail");
		}
		
		movieRepository.update(id, dto);
		return new CommonDto<>(HttpStatus.OK.value(), "ok");
	}
}
